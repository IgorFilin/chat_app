import { Bot, Context, Keyboard, session, SessionFlavor, InlineKeyboard } from 'grammy';
require('dotenv').config();
import { getQuestion, login } from './functions/coreFunctions';

interface SessionData {
  token: string | null;
  questionIndex: null | string;
  questionList: [];
  questionIndexUsedList: [];
}
type MyContext = Context & SessionFlavor<SessionData>;

const botToken: string = process.env.BOT_TOKEN!;

const bot = new Bot<MyContext>(botToken);

function initial(): SessionData {
  return {
    token: null,
    questionIndex: null,
    questionList: [],
    questionIndexUsedList: [],
  };
}
bot.use(session({ initial }));
const URL = process.env.URL || 'https://filin-hub.online';

async function authStartBot(ctx: any) {
  const token = ctx.session?.token;

  if (!token) {
    const questionTextHTML = `
    üîë –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç

    ‚úèÔ∏è –í —Ñ–æ—Ä–º–∞—Ç–µ: –≤–∞—à–∞_–ø–æ—á—Ç–∞@–ø–æ—á—Ç–∞.ru –ø–∞—Ä–æ–ª—å

    üîí –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å—Å—ã–ª–∫–µ: 

    üì® <a href="https://filin-hub.online/registration">–°–°–´–õ–ö–ê</a>

    üîß –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ø–æ –∫–æ–º–∞–Ω–¥–µ:

    /help ‚Äî –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
    `;
    await ctx.reply(questionTextHTML, {
      parse_mode: 'HTML', // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML
    });
    return;
  }

  const userId = ctx.from?.id;

  await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —è –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –≤–µ—Å–µ–ª–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!', {
    reply_markup: Keyboard.from([[Keyboard.text('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')]]).resized(),
  });
}

bot.command('start', (ctx: any) => {
  authStartBot(ctx);
});

bot.command('help', async (ctx: any) => {
  const questionTextHTML = `
  üîí –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ <a href="https://filin-hub.online/registration">–°—Å—ã–ª–∫–µ</a> 

  üîî –í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ <a href="https://cabinet.filin-hub.online/login">–°—Å—ã–ª–∫–µ</a>

  üîº –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ —Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –∏ –¥–ª—è –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ. üîº
  `;
  await ctx.reply(questionTextHTML, {
    parse_mode: 'HTML',
  });
});

bot.on('callback_query', async (ctx: any) => {
  const token = ctx.session?.token;
  if (!token) {
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
  await ctx.answerCallbackQuery();

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  const regx = /id=([^\s;]+);isAccept=(true|false)/;
  const data = ctx.callbackQuery.data;
  const id = data.match(regx)[1];
  const isAccept = JSON.parse(data.match(regx)[2]);

  // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  if (isAccept) {
    await ctx.reply('üéâ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üéâ', {
      reply_markup: Keyboard.from([[Keyboard.text('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')]]).resized(),
    });
  } else {
    await ctx.reply('‚ùå –£–≤—ã, —ç—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. ‚ùå', {
      reply_markup: Keyboard.from([[Keyboard.text('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')], [Keyboard.text('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞')]]).resized(),
    });
  }
  ctx.reply(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç ${isAccept}, –µ–≥–æ id = ${id}`);
});

bot.on('message', async (ctx: any) => {
  const textMessage = ctx.update.message.text;
  switch (true) {
    case /–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å/.test(textMessage):
      getQuestion(bot, ctx);
      break;
    case /–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞/.test(textMessage):
      getQuestion(bot, ctx, false);
      break;
    case /.+@.+\..+/.test(textMessage):
      const token = ctx.session?.token;
      if (!token) {
        try {
          const response = await login(textMessage);
          console.log('response', response);
          if (response?.data) {
            ctx.session.token = response?.data.token;
            ctx.reply('‚úÖ ' + response?.data.message);
            await authStartBot(ctx);
          }
        } catch (e) {
          ctx.reply('‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚ö†Ô∏è');
        }
      } else {
        ctx.reply('üéâ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, —É–¥–∞—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è');
      }
      break;
    default:
      break;
  }
});

bot.start();
