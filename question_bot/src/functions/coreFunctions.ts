import { InlineKeyboard } from 'grammy';
import { apiBot } from '../api/api';

export function createButtonsAnswer(question: any) {
  const keyboard = new InlineKeyboard();

  question.answers.forEach((answer: any, index: any) => {
    keyboard.text(`${index + 1}`, `id=${answer.id};isAccept=${answer.isAccept}`);
  });

  return keyboard;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –µ—â—ë –Ω–µ–±—ã–ª–æ.
function getRandomQuestion(ctx: any): number {
  const randomQuestionIndex = Math.floor(Math.random() * ctx.session.questionList.length);
  if (ctx.session.questionIndexUsedList.length === ctx.session.questionList.length) {
    ctx.session.questionIndexUsedList = [];
    return randomQuestionIndex;
  }
  if (!ctx.session.questionIndexUsedList.includes(randomQuestionIndex)) {
    ctx.session.questionIndexUsedList.push(randomQuestionIndex);
    return randomQuestionIndex;
  } else {
    return getRandomQuestion(ctx);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
export async function getQuestion(bot: any, ctx: any, isNextQuestion: boolean = true) {
  if (!ctx.session.questionList.length) {
    const { data }: any = await apiBot.getQuestions();
    ctx.session.questionList = data;
  }

  const sessionQuestionIndex = ctx.session?.questionIndex;
  let randomQuestion: number;

  if (isNextQuestion) {
    randomQuestion = getRandomQuestion(ctx);
    ctx.session.questionIndex = randomQuestion;
  } else {
    randomQuestion = sessionQuestionIndex;
  }

  const question = ctx.session.questionList[randomQuestion];

  const buttons = createButtonsAnswer(question);

  const questionTextHTML = `
  <code>
‚ùì${question.question.title}

üí° –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:

${question.answers.reduce((acc: any, curr: any, index: number) => {
  return (acc += `üìå ${index + 1} ${curr.content}\n`);
}, '')}
  </code>`;

  ctx.reply(questionTextHTML, {
    parse_mode: 'HTML', // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML
    reply_markup: buttons, // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
export async function login(textMessage: string) {
  const textMessageArr = textMessage.split(' ');
  const requestData = {
    email: textMessageArr[0],
    password: textMessageArr[1],
  };
  try {
    return await apiBot.login(requestData);
  } catch (e) {
    throw new Error('error');
  }
}
